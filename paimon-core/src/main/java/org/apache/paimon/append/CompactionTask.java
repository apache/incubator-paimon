/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.paimon.append;

import org.apache.paimon.data.BinaryRow;
import org.apache.paimon.io.CompactIncrement;
import org.apache.paimon.io.DataFileMeta;
import org.apache.paimon.io.DataInputViewStreamWrapper;
import org.apache.paimon.io.DataOutputViewStreamWrapper;
import org.apache.paimon.io.NewFilesIncrement;
import org.apache.paimon.table.AppendOnlyFileStoreTable;
import org.apache.paimon.table.sink.CommitMessage;
import org.apache.paimon.table.sink.CommitMessageImpl;
import org.apache.paimon.table.sink.CommitMessageSerializer;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

import static org.apache.paimon.utils.SerializationUtils.deserializedBytes;
import static org.apache.paimon.utils.SerializationUtils.serializeBytes;

/**
 * Compaction task generated by {@link AppendOnlyTableCompactionCoordinator} and executed be {@link
 * AppendOnlyTableCompactionWorker}.
 */
public class CompactionTask implements CommitMessage {

    private static final long serialVersionUID = 1L;

    private static final ThreadLocal<CommitMessageSerializer> CACHE =
            ThreadLocal.withInitial(CommitMessageSerializer::new);

    private BinaryRow partition;
    private transient List<DataFileMeta> newFiles;
    private transient List<DataFileMeta> restoredFiles;
    private transient List<DataFileMeta> compactBefore;
    private transient List<DataFileMeta> compactAfter;
    // while don't need compaction, the task is just only a container of newFiles.
    private boolean needCompact;

    public CompactionTask(
            BinaryRow partition,
            List<DataFileMeta> newFiles,
            List<DataFileMeta> restoredFiles,
            boolean needCompact) {
        this.partition = partition;
        this.newFiles = newFiles;
        this.restoredFiles = restoredFiles;
        this.needCompact = needCompact;
        compactBefore = new ArrayList<>();
        compactAfter = new ArrayList<>();

        if (needCompact) {
            compactBefore.addAll(this.newFiles);
            compactBefore.addAll(this.restoredFiles);
        }
    }

    public BinaryRow partition() {
        return partition;
    }

    @Override
    public int bucket() {
        return AppendOnlyFileStoreTable.NO_BUCKET_BUCKET;
    }

    public boolean isNeedCompact() {
        return needCompact;
    }

    public List<DataFileMeta> newFiles() {
        return newFiles;
    }

    public List<DataFileMeta> restoredFiles() {
        return restoredFiles;
    }

    public List<DataFileMeta> compactBefore() {
        return compactBefore;
    }

    public List<DataFileMeta> compactAfter() {
        return compactAfter;
    }

    public void doCompact(AppendOnlyCompactManager.CompactRewriter rewriter) throws Exception {
        if (needCompact) {
            compactAfter.addAll(rewriter.rewrite(compactBefore));
        }
    }

    public CommitMessage result() {
        NewFilesIncrement increment = new NewFilesIncrement(newFiles, Collections.EMPTY_LIST);
        CompactIncrement compactIncrement =
                new CompactIncrement(compactBefore, compactAfter, Collections.emptyList());
        return new CommitMessageImpl(
                partition, AppendOnlyFileStoreTable.NO_BUCKET_BUCKET, increment, compactIncrement);
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        out.defaultWriteObject();
        CommitMessageSerializer serializer = CACHE.get();
        out.writeInt(serializer.getVersion());
        serializeBytes(new DataOutputViewStreamWrapper(out), serializer.serialize(this));
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        int version = in.readInt();
        byte[] bytes = deserializedBytes(new DataInputViewStreamWrapper(in));
        CompactionTask message = (CompactionTask) CACHE.get().deserialize(version, bytes);
        this.partition = message.partition;
        this.needCompact = message.needCompact;
        this.newFiles = message.newFiles;
        this.restoredFiles = message.restoredFiles;
        this.compactBefore = message.compactBefore;
        this.compactAfter = message.compactAfter;
    }

    public int hashCode() {
        return Objects.hash(
                partition, newFiles, restoredFiles, compactBefore, compactAfter, needCompact);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CompactionTask that = (CompactionTask) o;
        return Objects.equals(partition, that.partition)
                && Objects.equals(newFiles, that.newFiles)
                && Objects.equals(restoredFiles, that.restoredFiles)
                && needCompact == that.needCompact
                && Objects.equals(compactBefore, that.compactBefore)
                && Objects.equals(compactAfter, that.compactAfter);
    }

    @Override
    public String toString() {
        return String.format(
                "CompactionTask {"
                        + "partition = %s, "
                        + "newFiles = %s, "
                        + "restoredFiles = %s, "
                        + "needCompact = %s}",
                partition, newFiles, restoredFiles, needCompact);
    }
}
